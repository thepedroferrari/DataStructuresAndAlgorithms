Following what I could find in https://wiki.python.org/moin/TimeComplexity:
I have never written in Python before, so I am probably making mistakes here and there.

Task 0: O(1)
We do not perform any iterations. The only method called is len() which is O(1). The simplified order of this
task is O(1).

Task 1: O(n)
The function accepts one array of arrays as a parameter, but only checks for index 0 and 1.
The checks are x in y which the order is O(n), for both checks that. Since we check for an O(n) operation inside a loop
I believe this solution is going to be O(n²). If used sets instead, we would be looking at a O(n).
# Udacity Feedback
We are now using sets, thank you for the heads-up on always do the best if I think it can be improved! The set-version,
as predicted, has an order of O(n).

Task 2: O(n)
We use some O(1) methods, but it falls into the same category as the previous task.
We are looping through an array, and for each iteration we are checking if the item exists in another place. This could
potentially become O(n²).
# Udacity Feedback
As pointed out in the previous answer, I learned that dictionaries use hashmaps and are O(1).
besides, we changed the for-in solution to max() which is O(n), and get() which is O(1).
This algorithm is, and was, O(n).


Task 3: O(n log n)
We are using a sorting algorithm which is O(n log n), but we are also looping through lists, giving it a O(n)
case order. We perform multiple separated O(n) operations, but the simplified analysis is O(n).
# Udacity Feedback
Thanks for reminding me that it was not the same as O(log n) which I confused the complexity with. The complexity of
this algorithm is going to be O(n log n) which is more complex than O(n).

Task 4:  O(n log n)
In this one we perform first a O(n) operation by looping through all calls and texts and creating the sets.
The sets will help reduce the amount of iterations further down, but we still need to check for item in set, inside
a list iteration, giving this task an order of O(n²)
# Udacity feedback
Same mistake about thinking sets and dictionaries data-check are O(n) when they are in fact a constant time order O(1).
The algorithm uses iterations O(n) but also a sorting function O(n log n),
which is the simplified version of this algorithm.

